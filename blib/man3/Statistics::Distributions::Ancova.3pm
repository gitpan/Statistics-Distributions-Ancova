.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Statistics::Distributions::Ancova 3"
.TH Statistics::Distributions::Ancova 3 "2009-12-01" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Statistics::Distributions::Ancova \- Perl implementation of One\-Way Analysis of Covariance for Independent Samples.
.SH "VERSION"
.IX Header "VERSION"
This document describes Statistics::Distributions::Ancova version 0.32.1.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Statistics::Distributions::Ancova;
\&
\&    # Create an Ancova object and set significance value of p = 0.05 for statistical test. See METHODS for optional named arguments and default values.
\&    my $anc = Statistics::Distributions::Ancova\->new ( { significance => 0.005, input_verbosity => 1, output_verbosity => 1 } );
\&
\&    # Example using k=3 groups. Data includes our dependent variable of interest (Y) and covariant data (X) that is used to eliminate obscuring effects of covariance.
\&    my @Drug_A_Y =  (\*(Aq29\*(Aq,\*(Aq27\*(Aq,\*(Aq31\*(Aq,\*(Aq33\*(Aq,\*(Aq32\*(Aq,\*(Aq24\*(Aq,\*(Aq16\*(Aq);
\&    my @Drug_A_X = (\*(Aq53\*(Aq,\*(Aq64\*(Aq,\*(Aq55\*(Aq,\*(Aq67\*(Aq,\*(Aq55\*(Aq,\*(Aq45\*(Aq,\*(Aq35\*(Aq);
\&    my @Drug_B_Y = (\*(Aq39\*(Aq,\*(Aq34\*(Aq,\*(Aq20\*(Aq,\*(Aq35\*(Aq,\*(Aq57\*(Aq,\*(Aq28\*(Aq,\*(Aq32\*(Aq,\*(Aq17\*(Aq);
\&    my @Drug_B_X = (\*(Aq24\*(Aq,\*(Aq19\*(Aq,\*(Aq13\*(Aq,\*(Aq18\*(Aq,\*(Aq25\*(Aq,\*(Aq16\*(Aq,\*(Aq16\*(Aq,\*(Aq13\*(Aq);
\&    my @Drug_C_Y = (\*(Aq12\*(Aq,\*(Aq21\*(Aq,\*(Aq26\*(Aq,\*(Aq17\*(Aq,\*(Aq25\*(Aq,\*(Aq9\*(Aq,\*(Aq12\*(Aq);
\&    my @Drug_C_X = (\*(Aq5\*(Aq,\*(Aq12\*(Aq,\*(Aq12\*(Aq,\*(Aq9\*(Aq,\*(Aq12\*(Aq,\*(Aq3\*(Aq,\*(Aq3\*(Aq);
\&
\&    # Data is sent to object as nested HASH reference. Individual group names are option, but to distinguish IV/DV, the names Y and X for the variables are compulsory.
\&    my $h_ref = { \*(Aqgroup_A\*(Aq =>  {
\&                                    Y => \e@Drug_A_Y,
\&                                    X => \e@Drug_A_X,
\&                            }, 
\&                \*(Aqgroup_B\*(Aq =>  { 
\&                                    Y => \e@Drug_B_Y,
\&                                    X => \e@Drug_B_X,
\&                            }, 
\&                \*(Aqgroup_C\*(Aq =>  { 
\&                                    Y => \e@Drug_C_Y,
\&                                    X => \e@Drug_C_X,
\&                            }, 
\&                };
\&
\&    # Feed the object the data pass data HASH reference with named argument \*(Aqdata\*(Aq.
\&    $anc\->load_data ( { data => $h_ref } );
\&
\&    # Perform analysis
\&    $anc\->ancova_analysis;
\&
\&    # To access results use results method. The return of this method is context dependent (see METHODS). 
\&    # To print a report to STDOUT call results in VOID context.
\&    $anc\->results();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1ANCOVA\s0 is a merger of \s-1ANOVA\s0 and regression for continuous variables. As with paired t\-test and repeated-measures \s-1ANOVA\s0 
this test removes the obscuring effects of pre-existing individual differences among subjects and thus may increase
statistical power. In cases where a substantial portion of the variability that occurs within each of the set of a dependent variable Y is 
actually covariance with another concomitant variable X measures, this test removes the covariance with X from Y thus 
removing a portion of the irrelevant variability of individual differences. See http://en.wikipedia.org/wiki/Analysis_of_covariance for more info.
.SH "Methods"
.IX Header "Methods"
.SS "new"
.IX Subsection "new"
Creates new Statistics::Distributions::Ancova object. Without arguments defaults to a significance test value of p = 0.05.
.PP
.Vb 1
\&    my $anc = Statistics::Distributions::Ancova\->new ();
.Ve
.PP
Use significance option to set the significance level for the test to values other than 0.05.
.PP
.Vb 1
\&    my $anc = Statistics::Distributions::Ancova\->new ( { significance => 0.005 } );
.Ve
.PP
To print data-checking step messages (upon data loading with \f(CW\*(C`load_data\*(C'\fR) to \s-1STDOUT\s0 set input_verbosity to 1.
.PP
.Vb 1
\&    my $anc = Statistics::Distributions::Ancova\->new ( { input_verbosity => 1 } );
.Ve
.PP
To print a detailed report when \f(CW\*(C`result\*(C'\fR method is called in \s-1VOID\s0 context to \s-1STDOUT\s0 set output_verbosity to 1.
.PP
.Vb 1
\&    my $anc = Statistics::Distributions::Ancova\->new ( { output_verbosity => 1 } );
.Ve
.SS "set_significance"
.IX Subsection "set_significance"
Convenience method to reset significance level. Without a value it defaults to p = 0.05 to change this use set_significance.
.PP
.Vb 2
\&    $anc\->set_significance();
\&    $anc\->set_significance( 0.0005 );
.Ve
.SS "set_input_verbosity"
.IX Subsection "set_input_verbosity"
Convenience method to reset the input verbosity level. Pass it 1 for verbose and 0 or no argument to leave default
silent state.
.PP
.Vb 3
\&    $anc\->set_input_verbosity (1); # Turns on verbosity
\&    $anc\->set_input_verbosity (0);
\&    $anc\->set_input_verbosity ();
.Ve
.SS "set_output_verbosity"
.IX Subsection "set_output_verbosity"
Convinience method to reset the output verbosity level. Pass it 1 for verbose and 0 or no argument to leave default
silent state.
.PP
.Vb 3
\&    $anc\->set_output_verbosity (1); # Turns on verbosity
\&    $anc\->set_output_verbosity (0);
\&    $anc\->set_output_verbosity ();
.Ve
.SS "load_data"
.IX Subsection "load_data"
To load or re-load data. Pass the data as named arguement 'data' within an anonymous \s-1HASH\s0 pointing to nested \s-1HASH\s0
reference containing the data. Within this \s-1HASH\s0 reference each subsequent nested \s-1HASH\s0 corresponds to a separate
individual/group. The names of these groups are arbitrary. Within each nested group \s-1HASH\s0 there must be exactly to keys.
One called 'Y' (corresponding to the Dependent Variable that we wish to adjust using covariance) that points to an
array ref or directly as an anonymous array of the corresponding data. The other key must be termed 'X' and corresponds 
to the concomitant variable whose covariation will be used to adjust Y. X is also passed as an array ref/anonymous 
array.
.PP
.Vb 4
\&  $anc\->load_data ( { data => { \*(AqGroupA\*(Aq => {   Y => [qw/ 29 27 31 33 32 24 16 /],      X => [qw/ 53 64 55 67 55 45 35 /], },
\&                                \*(AqGroupB\*(Aq => {   Y => [qw/ 39 34 20 35 57 28 32 17 /],   X => [qw/ 24 19 13 18 25 16 16 13 /], }, 
\&                                \*(AqGroupC\*(Aq => {   Y => [qw/ 12 21 26 17 25 9 12 /],       X => [qw/ 5 12 12 9 12 3 3 /], }, }, 
\&                  } );
.Ve
.SS "unload"
.IX Subsection "unload"
To clear the object use unload.
.PP
.Vb 1
\&    $anc\->unload;
.Ve
.SS "ancova_analysis"
.IX Subsection "ancova_analysis"
To perform the analysis.
.PP
.Vb 1
\&    $anc\->ancova_analysis;
.Ve
.SS "results"
.IX Subsection "results"
Used to access the results of the \s-1ANCOVA\s0 analysis. This method is context-dependent and will return a variety of 
different values depending on its calling context. In \s-1VOID\s0 context prints a report to \s-1STDOUT\s0 (use 
\&\f(CW\*(C`set_output_verbosity\*(C'\fR to print more detailed report).
.PP
.Vb 5
\&    # To print a short report to STDOUT
\&    $anc\->results();
\&    # To print a detailed report set output_verbosity to 1 on object creation or using the set_output_verbosity> method.
\&    $anc\->set_output_verbosity(1);
\&    $anc\->results();
.Ve
.PP
In \s-1LIST\s0 context it either returns the full list of all relevant values of F, p, df, \s-1MS\s0... or returns an ordered subset of the values
depending on whether you call it without or with numbered arguments respectively (see below).
.PP
.Vb 4
\&    # Calling results in LIST without arguments returns the full list of relevant values of F, p, df, MS...
\&    my %hash;
\&    @hash{qw($F_score, $p_value, $MS_bg, $SS_bg_Adj, $df_bg_Y, $MS_wg, $SS_wg_Adj, $df_wg_Y_Adj, $SS_total_Adj)} = $anc\->results();
\&    for (keys %hash) { print qq{\en$_ = $hash{$_} } };
.Ve
.PP
However, calling \f(CW\*(C`results\*(C'\fR in \s-1LIST\s0 context with numbered arguments corresponding to those below returns those arguments 
in the order passed to the method.
.PP
.Vb 3
\&    #      0         1        2        3          4         5        6            7              8      
\&    # ($F_score, $p_value, $MS_bg, $SS_bg_Adj, $df_bg_Y, $MS_wg, $SS_wg_Adj, $df_wg_Y_Adj, $SS_total_Adj) = $anc\->results(2,3,5)   
\&    print qq{\en\enCalling in LIST context. The F value, p_value, MS_bg and MS_wg are: @{$anc\->results(0,1,2,,5)}};
.Ve
.PP
In \s-1BOOLEAN\s0 context it returns true or false depending on whether the obtained F score was significant at the p_value chosen
upon object creation or set using the \f(CW\*(C`set_significance\*(C'\fR method (defaults to p = 0.05).
.PP
.Vb 1
\&    if ($anc\->results) { print qq{\enThis result is significant.} } else { print qq{\enThis result is not significant.} }
.Ve
.PP
In \s-1STRING\s0 context it returns a string message about whether the obtained F score was significant at the chosen p_value.
.PP
.Vb 1
\&    print qq{\en\enCall result in string returns a message : }, \*(Aq\*(Aq.$anc\->results;  # Prints \*(AqThis value of F is significant at your chosen .05 level\*(Aq...
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
\&'version'                   => 0,
\&'Statistics::Distributions' => '1.02',
\&'Math::Cephes'              => '0.47', 
\&'Carp'                      => '1.08', 
\&'Perl6::Form'               => '0.04',
\&'Contextual::Return'        => '0.2.1',
\&'List::Util'                => '1.19',
.SH "AUTHOR"
.IX Header "AUTHOR"
Daniel S. T. Hughes  \f(CW\*(C`<dsth@cpan.org>\*(C'\fR.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2009, Daniel S. T. Hughes \f(CW\*(C`<dsth@cpan.org>\*(C'\fR. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Statistics::Descriptive, Statistics::Distributions, Statistics::Distributions::Analyze, Statistics::ANOVA.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
Because this software is licensed free of charge, there is no warranty
for the software, to the extent permitted by applicable law. except when
otherwise stated in writing the copyright holders and/or other parties
provide the software \*(L"as is\*(R" without warranty of any kind, either
expressed or implied, including, but not limited to, the implied
warranties of merchantability and fitness for a particular purpose. The
entire risk as to the quality and performance of the software is with
you. should the software prove defective, you assume the cost of all
necessary servicing, repair, or correction.
.PP
In no event unless required by applicable law or agreed to in writing
will any copyright holder, or any other party who may modify and/or
redistribute the software as permitted by the above licence, be
liable to you for damages, including any general, special, incidental,
or consequential damages arising out of the use or inability to use
the software (including but not limited to loss of data or data being
rendered inaccurate or losses sustained by you or third parties or a
failure of the software to operate with any other software), even if
such holder or other party has been advised of the possibility of
such damages.
